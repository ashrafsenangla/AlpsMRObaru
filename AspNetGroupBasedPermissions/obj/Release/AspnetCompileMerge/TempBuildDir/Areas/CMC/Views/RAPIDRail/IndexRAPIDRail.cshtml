@using AspNetGroupBasedPermissions.Helpers
@{ ViewBag.Title = "RAPID Rail";}

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content" style="height:30px; color:white; background-color:#368">
                    <section class="content-header">
                        <h4>
                            @ViewBag.title
                            <small style="color:white">: upload deposit transaction</small>
                        </h4>
                    </section>
                </div>


                @using (Html.BeginForm("IndexRAPIDRail", "RAPIDRail", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
            <div class="ibox-content" style=" min-height:40px; color:white; background-color:#368">
                <div class="ibox-tools">
                    <button id="btntoConfirm" onclick="ConfirmBatch();" class="pull-left btn btn-primary btn-xs" style="margin-left:5px; margin-right:5px">Confirm</button>
                    <button id="btntoDelete" onclick="ConfirmDelete();" class="pull-left btn btn-primary btn-xs" style="margin-left:5px; margin-right:5px">Delete Batch</button>
                </div>
                <div class="ibox-tools">
                    <label><input type="text" class="form-control input-sm pull-left" style="font-size:11px" data-bind="value: formVendorSearch, valueUpdate: 'keyup'" placeholder="Search"></label>
                    <br style="margin-bottom:2px;" />
                </div>
                <div class="ibox-tools pull-left">
                    @Html.DropDownList("projectcode", ViewData["ProjectCode"] as SelectList, "<Select Project>", htmlAttributes: new { @id = "batchupload", name = "batchNumber1", @style = "font-size:11px;height:28px;color:black;font-size:11px", @class = "form-control input-sm", onchange = "ProjectChange(this.value)" })&nbsp;&nbsp;&nbsp;
                </div>

                <div class="dataTables_filter pull-left left">
                    &nbsp;
                </div>
                <div class="dataTables_filter pull-left left">
                    @Html.TextBox("batchnumber", ViewData["batchNumber"], new { id = "batchcode", name = "batchNumber2", @class = "form-control", @readonly = "readonly", @style = "font-size:11px;height:28px;color:black;background-color: #edfcf9;width:100px;font-size:11px" })&nbsp;&nbsp;
                </div>

                <div class="dataTables_filter pull-left left">
                    &nbsp;
                </div>
                <div class="ibox-tools pull-left btn btn-group-lg">
                    <input type="submit" value="Upload" style="height:28px;color:black" />
                </div>

                <div class="ibox-tools pull-left btn btn-group-lg" style="height:28px;color:black" >
                    <input type="file" name="file" style="color:red;height:28px" />
                    <p style="color:red">@ViewBag.ErrorMsg</p>
                    <p style="color:red">@ViewBag.Message2</p>
                    @*@Html.ActionLink("Refresh", "IndexRapidRail", null, new { @class = "btn btn-xs btn-primary pull-left", @style = "border-color:steelblue;background-color:steelblue; color: white;" })*@
                </div>
                <div style="color:black" class="dataTables_filter input-group date pull-left">
                    <span class="input-group-addon"><i class="fa fa-calendar " style="height:20px"></i></span>
                    @Html.TextBox("transdate", ViewData["transdate"], new { id = "transdate", name = "transdate", @class = "form-control", @style = "width:90px" })&nbsp;&nbsp;
                </div>

                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
            </div>
                }


                <div class="ibox-content">
                    <div class="dataTables_scroll dataTables_wrapper form-inline no-footer">
                        <table id="mainTable" class="table table-striped table-bordered table-hover dataTables-example">
                            <thead>
                                <tr>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select data-bind="options:availableLineName, value:selectedLineName" id="linename" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select data-bind="options:availableStationName, value:selectedStationName" id="stationname" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select data-bind="options:availableDeviceID, value:selectedDeviceID" id="deviceid1" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select data-bind="options:availableEquipmentCode, value:selectedEquipmentCode" id="equipmentcode" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select data-bind="options:availableEquipmentID, value:selectedEquipmentID" id="equipmentid" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select data-bind="options:availableBatchUpload, value:selectedBatchUpload" id="batchUploadSelect" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td></td>
                                    <td data-bind="style : {width: '5%' } ">
                                        <select class="form-control input-xs" data-bind="options:availableStatusData, value:selectedStatusData" style="font-size:11px; height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '9%' } ">
                                        <div class="input-group date">
                                            <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                            <input id="transdate1" data-bind="value:selectedUploadDate">
                                        </div>
                                    </td>

                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td data-bind="style : {width: '5%' } ">
                                        <select data-bind="options:availableFileName, value:selectedFileName" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>

                                </tr>
                                <tr style="background:black;color:white">
                                    <th>Line</th>
                                    <th>Station</th>
                                    <th>Device</th>
                                    <th>Equipment Code</th>
                                    <th>Equipment ID</th>
                                    <th>Transaction Date</th>
                                    <th>Total Amount</th>
                                    <th>Status<input name="select_all" type="hidden" disabled></th>
                                    <th>Account#</th>
                                    <th>Bank</th>
                                    <th>Account Type</th>
                                    <th>0.05</th>
                                    <th>0.10</th>
                                    <th>0.20</th>
                                    <th>0.50</th>
                                    <th>1.00</th>
                                    <th>2.00</th>
                                    <th>5.00</th>
                                    <th>10.00</th>
                                    <th>50.00</th>
                                    <th>100.00</th>
                                    <th>Reference#</th>
                                    <th>FileName</th>
                                </tr>
                            </thead>
                            <tbody data-bind="dataTablesForEach:
                                   @Html.Partial("_IndexColumn23")
                                <tr>
                                    <td data-bind="text:LineName, style : {width: '5%' } "></td>
                                    <td data-bind="text:StationCode, style : {width: '5%' } "></td>
                                    <td data-bind="text:DeviceID, style : {width: '5%' } "></td>
                                    <td data-bind="text:EquipmentCode, style : {width: '3%' } "></td>
                                    <td data-bind="text:EquipmentID, style : {width: '5%' } "></td>
                                    <td data-bind="text:TransactionDateTime, style : {width: '5%' } "></td>
                                    <td data-bind="numericText: TotalAmount, precision: 2, style : {textAlign: 'right' ,  width:'8%'}"></td>
                                    <td data-bind="text:Status, style : {width: '3%' } "></td>
                                    <td data-bind="text:AccountNumber, style : {width: '3%' } "></td>
                                    <td data-bind="text:BankCode, style : {width: '3%' } "></td>
                                    <td data-bind="text:AccountBankType, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno005, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno010, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno050, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno100, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno200, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno500, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno1000, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno2000, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno5000, style : {width: '3%' } "></td>
                                    <td data-bind="text:Deno10000, style : {width: '3%' } "></td>
                                    <td data-bind="text:ReferenceNo, style : {width: '3%' } "></td>
                                    <td data-bind="text:FileName, style : {width: '5%' } "></td>
                                </tr>
                            </tbody>
                            <tr>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th style="background: black; color:white;">Total</th>
                                <th data-bind="numericText: totalCash, precision: 2, style : {textAlign: 'right' , color: 'white' ,background: 'red', width:'10%'}"></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                @*<th></th>
                        <th></th>
                        <th></th>
                        <th></th>*@
                            </tr>
                        </table>
                        <div class="dataTables_info">
                            Showing <label data-bind="text: totalRow()==0 ? 0 : (indexPage()*pageSize())+1"></label> to <label data-bind="text: (indexPage()+1)*pageSize() > totalRow() ? totalRow():(indexPage()+1)*pageSize()"></label> of <label data-bind="text: totalRow"></label> entries
                        </div>
                        <div class="dataTables_paginate paging_simple_numbers">
                            <ul class="pagination">
                                <li class="paginate_button previous" data-bind="click: prevPage, disable: indexPage()==0, css: { 'disabled': indexPage()==0}" tabindex="0"><a href="#">Previous</a></li>
                                <li class="paginate_button active" tabindex="0"><a href="#"><label data-bind="text: indexPage()+1"></label></a></li>
                                <li class="paginate_button next" data-bind="click: nextPage, disable: (indexPage()+1)==totalPage(), css: { 'disabled': (indexPage()+1)==totalPage()}" tabindex="0"><a href="#">Next</a></li>
                            </ul>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div id="myForm1" class="form-popup" style="">
    <div id="scandiv" class="panel panel-primary" style="min-width:50px;min-height:100px;">
        <div class="panel-heading">
            <h3 class="panel-title" style="min-height:15px;">
                Are You Sure Want To Confirm This Batch?
            </h3>
        </div>
        <div class="panel-body">
            <div class="form-group" style="padding-top:10px;padding-left:30px">
                <input type="text" disabled="disabled" id="btnWarning1" style="min-width:280px;color:red;background-color:white;border:white;padding-bottom:15px;">
                <input class="btn btn-primary" name="submitButton" id="btnConfirmed" value="Confirm Batch" type="button">
                <button type="button" class="btn cancel btn btn-xs btn-white" onclick="closeForm1()">Cancel</button>
            </div>
        </div>
    </div><hr />
</div>

<div id="myForm2" class="form-popup" style="">
    <div id="scandiv" class="panel panel-primary" style="min-width:50px;min-height:100px;">
        <div class="panel-heading">
            <h3 class="panel-title" style="min-height:15px;">
                Are You Sure Want To Delete This Batch?
            </h3>
        </div>
        <div class="panel-body">
            <div class="form-group" style="padding-top:10px;padding-left:30px">
                <input type="text" disabled="disabled" id="btnWarning2" style="min-width:280px;color:red;background-color:white;border:white;padding-bottom:15px;">
                <input class="btn btn-primary" name="submitButton" id="btnDelete" value="Confirm Delete" type="button">
                <button type="button" class="btn cancel btn btn-xs btn-white" onclick="closeForm2()">Cancel</button>
            </div>
        </div>
    </div><hr />
</div>


@section Styles {
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    <style>
        /* The popup form - hidden by default */
        .form-popup {
            display: none;
            position: fixed;
            bottom: 250px;
            right: 420px;
            left: 470px;
            border: 3px solid #f1f1f1;
            z-index: 9;
        }

        .ui-dialog-3000 {
            z-index: 3000 !important;
        }

        .ui-dialog-2900 {
            z-index: 2900 !important;
        }

        .disable-background-eee {
            background: #eee !important;
        }

        .dataTables_scroll {
            overflow: auto;
            position: relative;
        }

        .backgroundSelected {
            background-color: rgb(102, 204, 204) !important;
        }

        .label_p {
            display: inline-block;
            max-width: 100%;
            margin-bottom: 0px;
            font-weight: normal !important;
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/app/knockoutDatatableCheckbox")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/notifyjs")

    @{ TempData["Data1"] = ViewBag.Data1;}
    @ViewData["PersonName"] = "Test Name";

    <script type="text/javascript">

    function ValidateTextFile() {
        GenerateTxtFile();

        }

    function GenerateTxtFile() {
            $('#dialog-Loading').dialog("open");
            $.ajax({
                type: "POST",
                url: "@Url.Action("DownLoadBacthFile", "CashCollectTransfer")",
                  data: {  branch: "Test" },
                 success: function (data) {
                    alert("Data has been added successfully.");
                    location.reload(true);
                },
                error: function () {
                    alert("Error With Record. Please re-enter !!!");
                    location.reload(true);
                }
            });
    }

    function ConfirmBatch() {
            document.getElementById("myForm1").style.display = "block";
            document.getElementById('btnConfirmed').style.visibility = 'visible';
            document.getElementById("btnWarning1").value = "";
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            //alert(batchUploadSelected);

            if (batchUploadSelected == "All") {
              //  alert(batchUploadSelected);
                document.getElementById('btnConfirmed').style.visibility='hidden';
                document.getElementById("btnWarning1").value = "Please select batch number!";
            }

           $("#btnConfirmed").click(function () {
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            //alert(batchUploadSelected);
              $.ajax({
                type: "POST",
                url: '@Url.Action("ConfirmBatchRAPID")',
                data: '{ batchno : "' + batchUploadSelected + '" }',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    alert("The batch has been confirmed successfully!");
                    location.reload(true);
                },
                  error: function () {
                   document.getElementById('btnConfirmed').style.visibility='hidden';
                   document.getElementById("btnWarning1").value = "Cannot Confirm Batch. Please Check With Administrator.";
                }
            });

            return false;
        });
    }

    function ConfirmDelete() {
            document.getElementById("myForm2").style.display = "block";
            document.getElementById('btnDelete').style.visibility = 'visible';
            document.getElementById("btnWarning2").value = "";
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            //alert(batchUploadSelected);

            if (batchUploadSelected == "All") {
              //  alert(batchUploadSelected);
                document.getElementById('btnDelete').style.visibility='hidden';
                document.getElementById("btnWarning2").value = "Please select batch number!";
            }

           $("#btnDelete").click(function () {
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            alert(batchUploadSelected);
              $.ajax({
                type: "POST",
                url: '@Url.Action("DeleteBatch")',
                data: '{ batchno : "' + batchUploadSelected + '" }',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                  success: function (data) {
                    alert("The batch has been deleted successfully!");
                    location.reload(true);
                },
                  error: function () {
                   document.getElementById('btnDelete').style.visibility='hidden';
                   document.getElementById("btnWarning2").value = "Cannot Delete Batch. Please Check With Administrator!";
                }
            });

            return false;
        });
    }

         $("#dialog-Approve, #dialog-Reject, #dialog-Return").dialog({
            open: function (event, ui) {
            },
            autoOpen: false,
            height: 200,
            width: 500,
            modal: true,
            dialogClass: "no-titlebar-round"
        }).css({ "font-family": "'open sans', 'Helvetica Neue', 'Helvetica', Arial, sans-serif", "font-size": "12px" });

               $('#batchupload').change(function () {
                var comments = $('#batchupload').val();
                $.ajax({
                    url: "/RAPIDRail/GetBatchUploadNo",
                    dataType: "json",
                    type: "GET",
                    contentType: 'application/json; charset=utf-8',
                    cache: false,
                    data: { strSelected: comments },
                    success: function (data) {
                        if (data.success) {
                            batchcode: $("#batchcode").val(data.batchcodeno);
                        }
                    },
                    error: function (xhr) {
                       batchcode: $("#batchcode").val("");
                        alert('Please Select A Correct Project Code!!!');
                    }
                });
               });


        jQuery.extend(jQuery.fn.dataTableExt.oSort, {
            "customDate-pre": function (a) {
                var ukDatea = a.split('/');
                return (ukDatea[2] + ukDatea[1] + ukDatea[0]) * 1;
            },

            "customDate-asc": function (a, b) {
                return ((a < b) ? -1 : ((a > b) ? 1 : 0));
            },

            "customDate-desc": function (a, b) {
                return ((a < b) ? 1 : ((a > b) ? -1 : 0));
            }
        });
        Date.prototype.toFormattedDate = function () {
            var dd = this.getDate();
            if (dd < 10) dd = '0' + dd;
            var mm = this.getMonth() + 1;
            if (mm < 10) mm = '0' + mm;
            var yyyy = this.getFullYear();
            /* change format here */
            return String(dd + "/" + mm + "/" + yyyy);
        };

        var MSR = function (data) {
         var self = this;
            this.ID = ko.observable(data.ID);
            this.CreationDate = ko.observable(data.CreationDate),
            this.CreationTime = ko.observable(data.CreationTime),
            this.RecBatchNumber = ko.observable(data.RecBatchNumber),
            this.ProjectName = ko.observable(data.ProjectName);
            this.CITRunningNumber = ko.observable(data.CITRunningNumber);
            this.SRTBranchCode = ko.observable(data.SRTBranchCode);
            this.JobDate = ko.observable(data.JobDate);
            this.VehicleNumber = ko.observable(data.VehicleNumber);
            this.JobCategory = ko.observable(data.JobCategory);
            this.SRTCustomerCode = ko.observable(data.SRTCustomerCode);
            this.SRTCustomerBranch = ko.observable(data.SRTCustomerBranch);
            this.JobPoint = ko.observable(data.JobPoint);
            this.KioskID = ko.observable(data.KioskID);
            this.CollectionAmount = ko.observable(data.CollectionAmount);
            this.CollectionAmount1 = ko.observable(data.CollectionAmount1).extend({numeric: 2});
            this.ArrivalTimeCollection = ko.observable(data.ArrivalTimeCollection);
            this.DepartureTimeFromCollection = ko.observable(data.DepartureTimeFromCollection);
            this.SealNumbe = ko.observable(data.SealNumber);
            this.TEBNumber = ko.observable(data.TEBNumber);
            this.ReferenceNo = ko.observable(data.ReferenceNo);
            this.HashTotal = ko.observable(data.HashTotal);
            this.Status = ko.observable(data.Status);
            this.TotalCashAmount = ko.observable(data.TotalCashAmount);
            this.TotalCashAmount1 = ko.observable(data.TotalCashAmount1);
            this.FileName = ko.observable(data.FileName);
            this.UploadDate = ko.observable(data.UploadDate);

            this.DetailURL = ko.observable(data.DetailURL);
            this.ShowButton = ko.observable(data.ShowButton);
        };

    //function NumberFormatter(number, decimals, dec_point, thousands_sep) {
    //    var n = !isFinite(+number) ? 0 : +number,
    //        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
    //        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
    //        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
    //        toFixedFix = function (n, prec) {
    //            var k = Math.pow(10, prec);
    //            return Math.round(n * k) / k;
    //        },
    //        s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');
    //    if (s[0].length > 3) {
    //        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
    //    }
    //    if ((s[1] || '').length < prec) {
    //        s[1] = s[1] || '';
    //        s[1] += new Array(prec - s[1].length + 1).join('0');
    //    }
    //    return s.join(dec);
    //}

        var ViewModel = new function () {
            var self = this;
            var defaultDropdownText = 'All';
          //  var defaultDropdownTextStatus = 'Draft';
         //   var defaultdate = new Date().toFormattedDate();
            self.pageSize = ko.observable(1000);
            self.indexPage = ko.observable(0);
            self.totalPage = ko.observable(1);
            self.totalRow = ko.observable(0);
            self.totalCash = ko.observable(0);
            self.hocs = ko.observableArray([]);
            self.formVendorSearch = ko.observable("");

            var defaultdate = new Date().toFormattedDate();
            self.availableProjectName = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.ProjectDesc){<text>'@item',</text>}]);
            self.availableBatchUpload = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.BatchUpload){<text>'@item',</text>}]);
            self.availableStatusData = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.StatusData){<text>'@item',</text>}]);
            self.availableFileName = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.FileName){<text>'@item',</text>}]);

            self.availableLineName = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.LineName){<text>'@item',</text>}]);
            self.availableStationName = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.StationName){<text>'@item',</text>}]);
            self.availableDeviceID = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.DeviceID){<text>'@item',</text>}]);
            self.availableEquipmentCode = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.EquipmentCode){<text>'@item',</text>}]);
            self.availableEquipmentID = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.EquipmentID){<text>'@item',</text>}]);

            self.selectedProjectName = ko.observable(defaultDropdownText);
            self.selectedBatchUpload = ko.observable(defaultDropdownText);
            self.selectedStatusData = ko.observable(defaultDropdownText);
            self.selectedFileName = ko.observable(defaultDropdownText);
            self.selectedLineName = ko.observable(defaultDropdownText);
            self.selectedStationName = ko.observable(defaultDropdownText);
            self.selectedDeviceID = ko.observable(defaultDropdownText);
            self.selectedEquipmentCode = ko.observable(defaultDropdownText);
            self.selectedEquipmentID = ko.observable(defaultDropdownText);
            self.selectedUploadDate = ko.observable(defaultdate);

            self.nextPage = function () {
                if ((self.indexPage() + 1) < self.totalPage()) {
                    self.indexPage(self.indexPage() + 1);
                    self.loadhoc();
                }
            }
            self.prevPage = function () {
                if (self.indexPage() > 0) {
                    self.indexPage(self.indexPage() - 1);
                    self.loadhoc();
                }
            }

            self.loadhoc = function () {
                self.hocs.removeAll();

                $.ajax('@Url.Action("GetRAPIDRailBatch", "RAPIDRail")', {
                    data: ko.toJSON({
                        search: self.formVendorSearch(),
                        pageSize: self.pageSize(),
                        pageIndex: self.indexPage(),
                        totalCash: self.totalCash(),
                        projectname: self.selectedProjectName(),
                        statusdata: self.selectedStatusData(),
                        batchupload: self.selectedBatchUpload(),
                        filename: self.selectedFileName(),
                        linename: self.selectedLineName(),
                        stationname: self.selectedStationName(),
                        deviceid: self.selectedDeviceID(),
                        equipmentcode: self.selectedEquipmentCode(),
                        equipmentid: self.selectedEquipmentID(),
                        uploaddate:self.selectedUploadDate(),

                    }),

                    type: "post",
                    contentType: "application/json",
                    success: function (result) {
                        self.hocs.removeAll();
                        var underlyingArray = self.hocs();
                        for (var i = 0; i < result.hocs.length; i++) {
                            var row = result.hocs[i];
                            var record = {
                                ID: row.ID,
                                FileName: row.FileName,
                                ProjectName: row.ProjectID,
                                RecBatchNumber: row.RecBatchNumber,
                                LineName: row.LineName,
                                StationCode: row.StationCode,
                                DeviceID: row.DeviceID,
                                EquipmentCode: row.EquipmentCode,
                                EquipmentID: row.EquipmentID,
                                TransactionDateTime: row.TransactionDateTime,
                                TransactionTime: row.TransactionTime,
                                TotalAmount: row.TotalAmount,
                                Deno005: row.Deno005,
                                Deno010: row.Deno010,
                                Deno020: row.Deno020,
                                Deno050: row.Deno050,
                                Deno100: row.Deno100,
                                Deno200: row.Deno200,
                                Deno500: row.Deno500,
                                Deno1000: row.Deno1000,
                                Deno2000: row.Deno2000,
                                Deno5000: row.Deno5000,
                                Deno10000: row.Deno1000,
                                BankCode: row.BankCode,
                                AccountNumber: row.AccountNumber,
                                AccountBankType: row.AccountBankType,
                                UploadDate: row.UploadDate,
                                UserSystemID: row.UserSystemID,
                                ReferenceNo: row.ReferenceNo,
                                Status: row.Status,
                                DetailURL: row.DetailURL,
                                ShowButton: row.ShowButton,
                            }
                            underlyingArray.push(record);
                        }
                        self.hocs.valueHasMutated();
                        self.totalPage(result.totalPage);
                        self.totalRow(result.totalRow);
                        self.totalCash(result.totalCash);
                        $('#dialog-Loading').dialog("close");

                    },
                    error: function (error) {
                        $.notify(
                            error.responseText, {
                                position: "top center",
                                className: "error"
                            }
                        );
                        $('#dialog-Loading').dialog("close");
                    }
                });
            }

            self.restartSearchPagination = function () {
                self.hocs.removeAll();
                self.indexPage(0);
                self.totalPage(1);
                self.totalRow(0);
                self.totalCash(0);
            }
            self.formVendorSearch.subscribe(function (value) {
                if (value == '') self.formVendorSearch("");

                self.restartSearchPagination();
                self.loadhoc();
            });
            self.pageSize.subscribe(function (value) {
                if (self.formVendorSearch() == '') self.formVendorSearch("");
                self.restartSearchPagination();
                self.loadhoc();
            });

            self.vendorsComputed = ko.computed(function () {
                var records = self.hocs;
                return records;
            });
            self.selectedProjectName.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
            });
               self.selectedStatusData.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
               });
             self.selectedUploadDate.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
                });
              self.selectedBatchUpload.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
              });


              self.selectedLineName.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
              });
              self.selectedStationName.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
              });
              self.selectedDeviceID.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
              });
               self.selectedEquipmentCode.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
              });
              self.selectedEquipmentID.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
              });
              self.selectedFileName.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
              });
            self.loadhoc();

            function addCommas(nStr) {
                nStr += '';
                x = nStr.split('.');
                x1 = x[0];
                x2 = x.length > 1 ? '.' + x[1] : '';
                var rgx = /(\d+)(\d{3})/;
                while (rgx.test(x1)) {
                    x1 = x1.replace(rgx, '$1' + ',' + '$2');
                }
                return x1 + x2;
            }
              var formatted = addCommas(12345678.88)
              $('#withComma').val(formatted);
    };

     $(document).ready(function () {
     });


    $(".use-address").click(function() {
    var $row = $(this).closest("tr");    // Find the row
    var $text = $row.find(".nr").text(); // Find the text

    // Let's test it out
    alert($text);
     });

        $(document).ready(function () {

            $('#transdate').datepicker({
                todayBtn: "linked",
                format: "dd/mm/yyyy",
                keyboardNavigation: false,
                forceParse: false,
                calendarWeeks: true,
                autoclose: true,
            }).datepicker("setDate", new Date());

              $('#transdate1').datepicker({
                todayBtn: "linked",
                format: "dd/mm/yyyy",
                keyboardNavigation: false,
                forceParse: false,
                calendarWeeks: true,
                autoclose: true,
              }).datepicker("setDate", new Date());


            ko.bindingHandlers.numericText = {
                update: function (element, valueAccessor, allBindingsAccessor) {
                    var value = ko.utils.unwrapObservable(valueAccessor()),
                        precision = ko.utils.unwrapObservable(allBindingsAccessor().precision) || ko.bindingHandlers.numericText.defaultPrecision,
                        formattedValue = value.toFixed(precision);

                    ko.bindingHandlers.text.update(element, function () { return formattedValue; });
                },
                defaultPrecision: 1
            };

            ko.applyBindings(ViewModel);
            ViewModel.loadhoc();

        });

    function openForm1() {
        document.getElementById("myForm1").style.display = "block";
    }

    function closeForm1() {
          document.getElementById("myForm1").style.display = "none";
    }


    function openForm2() {
        document.getElementById("myForm2").style.display = "block";
    }

    function closeForm2() {
          document.getElementById("myForm2").style.display = "none";
            }


    </script>
}

