@model Core.Entities.Data.CMC.CCTransfer
@using AspNetGroupBasedPermissions.Helpers
@using AspNetGroupBasedPermissions.Helpers.Constant;

@{ ViewBag.Title = "Cash Management";}

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content" style="height:30px; color:white; background-color:#368">
                    <section class="content-header">
                        <h4>
                            @ViewBag.title
                            <small style="color:white">: Generate Bank Online Batch</small>
                        </h4>
                    </section>
                </div>
                <div class="ibox-content dataTables_scroll dataTables_wrapper form-inline no-foote" style="min-height:40px; color:black; background-color:#368">
                    <div class="dataTables_filter dataTables_length dataTables_length pull-right">
                        <label>
                            <select class="form-control input-sm" style="width:80px;font-size:11px" data-bind="value:pageSize">
                                <option value="10">10/page</option>
                                <option value="25">25/page</option>
                                <option value="50">50/page</option>
                                <option value="100">100/page</option>
                            </select>
                        </label>
                        <label><input type="text" class="form-control input-sm" style="font-size:11px" data-bind="value: formVendorSearch, valueUpdate: 'keyup'" placeholder="Search">&nbsp;&nbsp;&nbsp;</label>
                        <div class="dataTables_filter dataTables_length dataTables_length pull-right">
                            <button id="btntoSubmit" onclick="SubmitBatch();" class="pull-left btn btn-primary btn-xs" style="margin-left:1px; margin-right:1px">Submit To NAV</button>
                            <button id="gentxtfile" onclick="ValidateTextFile();" class="pull-left btn btn-primary btn-xs" style="margin-left:5px; margin-right:5px">Generate Text File</button>
                            <button id="btnDownLoad" class="pull-left btn btn-primary btn-xs" style="margin-left:1px; margin-right:5px">Download File</button>
                            <select id="projectId" data-bind="options:availableProjectName, value:selectedProjectName" onchange="FuncBatchNo(this.value)" class="form-control input-xs" style="font-size:11px;height:30px"></select>
                            <select id="batchUploadSelect" data-bind="options:availableBatchUpload, value:selectedBatchUpload" onchange="FuncJVNo(this.value)" class="form-control input-sm" style="width:130px;font-size:11px;height:30px"></select>
                         
                        </div>
                    </div>
                </div>

                <div class="ibox-content">
                    <div class="dataTables_scroll dataTables_wrapper form-inline no-footer">
                        <table id="mainTable" class="table table-striped table-bordered table-hover dataTables-example">
                            <thead>
                                <tr>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select id="BatchType" data-bind="options:availableBatchType, value:selectedBatchType" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select id="JVid" data-bind="options:availableJVNo, value:selectedJVNo" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '25%' } ">
                                        <select id="AccountId" data-bind="options:availableAccountNo, value:selectedAccountNo" onchange="FuncAccountNo(this.value)" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                </tr>
                                <tr style="background:black;color:white">
                                    <th>Batch Name</th>
                                    <th>JV No#</th>
                                    <th>Account No#</th>
                                    <th>Description</th>
                                    <th>Amount</th>
                                    <th>Bank</th>
                                    <th>Account Number</th>
                                    <th>Beneficiary</th>
                                    <th>Account Category</th>
                                    <th><input name="select_all" type="hidden" disabled></th>
                                </tr>
                            </thead>
                            <tbody data-bind="dataTablesForEach:
                                   @Html.Partial("_IndexColumn10")
                                <tr>
                                    <td data-bind="text:JournalBatchName, style : {width: '5%' } "></td>
                                    <td data-bind="text:JVNo, style : {width: '15%' } "></td>
                                    <td data-bind="text:AccountNo, style : {width: '20%' } "></td>
                                    <td data-bind="text:Description, style : {width: '40%' } "></td>
                                    <td data-bind="numericText: CreditAmount, precision: 2, style : {textAlign: 'right' ,  width:'4%'}"></td>
                                    <td data-bind="text:BankName, style : {width: '10%' } "></td>
                                    <td data-bind="text:AccountNumber, style : {width: '20%' } "></td>
                                    @*<td data-bind="style : {width: '4%' } ">
        <a data-bind="visible:ShowButton==true,attr: { href: DownloadFile}" title="Click To Download" style="color:steelblue;font-size:11px" class="links">Bank File</a>
         </td>*@
                                <td>
                                    <a download data-bind="attr: {href : 'FileUpload/Data.txt'}, text:AccountType">
                                        <button type="button" class="btn btn-white">Detail</button>
                                    </a>

                                </td>
                                    @*<td data-bind="text:Beneficiary, style : {width: '40%' } "></td>*@
                                    <td data-bind="text:AccountCategory, style : {width: '8%' } "></td>
                                    <td></td>
                                </tr>
                            </tbody>
                            <tr>
                            
                                <th></th>
                                <th></th>
                                <th></th>
                                <th style="background: black; color:white;">Total</th>
                                <th data-bind="numericText: totalCr, precision: 2, style : {textAlign: 'right' , color: 'white' ,background: 'red',   width:'10%'}"></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                            </tr>
                        </table>
                        <div class="dataTables_info">
                            Showing <label data-bind="text: totalRow()==0 ? 0 : (indexPage()*pageSize())+1"></label> to <label data-bind="text: (indexPage()+1)*pageSize() > totalRow() ? totalRow():(indexPage()+1)*pageSize()"></label> of <label data-bind="text: totalRow"></label> entries
                        </div>
                        <div class="dataTables_paginate paging_simple_numbers">
                            <ul class="pagination">
                                <li class="paginate_button previous" data-bind="click: prevPage, disable: indexPage()==0, css: { 'disabled': indexPage()==0}" tabindex="0"><a href="#">Previous</a></li>
                                <li class="paginate_button active" tabindex="0"><a href="#"><label data-bind="text: indexPage()+1"></label></a></li>
                                <li class="paginate_button next" data-bind="click: nextPage, disable: (indexPage()+1)==totalPage(), css: { 'disabled': (indexPage()+1)==totalPage()}" tabindex="0"><a href="#">Next</a></li>
                            </ul>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<div id="myForm1" class="form-popup" style="">
    <div id="scandiv" class="panel panel-primary" style="min-width:50px;min-height:100px;">
        <div class="panel-heading">
            <h3 class="panel-title" style="min-height:15px;">
                Are You Sure Want To Submit This Batch To AP/Payment Department?
            </h3>
        </div>
        <div class="panel-body">
            <div class="form-group" style="padding-top:10px;padding-left:30px">
                <input type="text" disabled="disabled" id="btnWarning1" style="min-width:280px;color:red;background-color:white;border:white;padding-bottom:15px;">
                <input class="btn btn-primary" name="submitButton" id="btnSubmit" value="Submit Batch" type="button">
                <button type="button" class="btn cancel btn btn-xs btn-white" onclick="closeForm1()">Cancel</button>
            </div>
        </div>
    </div><hr />
</div>

<div id="myForm2" class="form-popup" style="">
    <div id="scandiv" class="panel panel-primary" style="min-width:50px;min-height:100px;">
        <div class="panel-heading">
            <h3 class="panel-title" style="min-height:15px;">
                Are You Sure Want To Delete This Batch?
            </h3>
        </div>
        <div class="panel-body">
            <div class="form-group" style="padding-top:10px;padding-left:30px">
                <input type="text" disabled="disabled" id="btnWarning2" style="min-width:280px;color:red;background-color:white;border:white;padding-bottom:15px;">
                <input class="btn btn-primary" name="submitButton" id="btnDelete" value="Confirm Delete" type="button">
                <button type="button" class="btn cancel btn btn-xs btn-white" onclick="closeForm2()">Cancel</button>
            </div>
        </div>
    </div><hr />
</div>


@section Styles {
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    <style>
        /* The popup form - hidden by default */
        .form-popup {
            display: none;
            position: fixed;
            bottom: 250px;
            right: 420px;
            left: 470px;
            border: 3px solid #f1f1f1;
            z-index: 9;
        }

        .ui-dialog-3000 {
            z-index: 3000 !important;
        }

        .ui-dialog-2900 {
            z-index: 2900 !important;
        }

        .disable-background-eee {
            background: #eee !important;
        }

        .dataTables_scroll {
            overflow: auto;
            position: relative;
        }

        .backgroundSelected {
            background-color: rgb(102, 204, 204) !important;
        }

        .label_p {
            display: inline-block;
            max-width: 100%;
            margin-bottom: 0px;
            font-weight: normal !important;
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/app/knockoutDatatableCheckbox")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/notifyjs")

    <script type="text/javascript">


    function ValidateTextFile() {
        //alert("Text File");
        GenerateTxtFile();
        }

    function GenerateTxtFile() {
        var batchnumber = document.getElementById("batchUploadSelect").value;
        var batchtype = document.getElementById("BatchType").value;
        var batchbank = document.getElementById("AccountId").value;

        alert(batchnumber);
        alert(batchtype);
        alert(batchbank);

            $('#dialog-Loading').dialog("open");
            $.ajax({
                type: "POST",
                url: "@Url.Action("GenerateBatchFileOCBC", "CashCollectTransfer")",
                  data: {  recbatchnumber : batchnumber, accountno: batchbank,  accountcategory: batchtype },
                 success: function (data) {
                    alert("Data has been download successfully at Windiws Desktop!");
                    location.reload(true);
                },
                error: function () {
                    alert("Error With Record. Please re-enter !!!");
                    location.reload(true);
                }
            });
    }

    function FuncBatchNo(projectId) {
              if (projectId== null || projectId == "" ) {
                  $('#batchUploadSelect').html(""); // clear before appending new list
                  $('#batchUploadSelect').append(
                      $('<option></option>').val("All").html("All"));
              }
              else {
                  $.ajax({
                      url: '@Url.Action("FillBatchUpload", "CashCollectTransfer", new { area = "CMC" })',
                      type: "POST",
                      dataType: "JSON",
                      data: {
                           projectid: projectId
                      },
                      success: function (results) {
                          $('#batchUploadSelect').html(""); // clear before appending new list
                          $('#batchUploadSelect').append(
                          $('<option></option>').val("All").html("All"));
                          $.each(results, function (i, results) {
                              $('#batchUploadSelect').append(
                                  $('<option></option>').html(results.RecBatchNumber));
                          });
                      },
                      error: function (error) {
                          alert("Error: Wrong Batch Number");
                      }
                  });
              }
            }


    function FuncAccountNo(AccountId) {
        DisplayMainButton();
            }


    function FuncJVNo(batchUploadSelect) {
        DisplayMainButton();
        document.getElementById("JVid").value = "RAPID-002";

        if (batchUploadSelect == null || batchUploadSelect == "") {
                  $('#JVid').html(""); // clear before appending new list
                  $('#JVid').append(
                      $('<option></option>').val("All").html("All"));
              }
              else {
                  $.ajax({
                      url: '@Url.Action("FillJV", "CashCollectTransfer", new { area = "CMC" })',
                      type: "POST",
                      dataType: "JSON",
                      data: {
                          batchrecno: batchUploadSelect
                      },
                      success: function (results) {
                          $('#JVid').html(""); // clear before appending new list
                           $('#JVid').append(
                              $('<option></option>').val("All").html("All"));

                          $.each(results, function (i, results) {
                              $('#JVid').append(
                                  $('<option></option>').html(results.JVNo));
                          });

                      },
                      error: function (error) {
                          alert("Error: Wrong JV number");
                      }
                  });
              }
            }


    function SubmitBatch() {

            document.getElementById("myForm1").style.display = "block";
            document.getElementById('btnSubmit').style.visibility = 'visible';
            document.getElementById("btnWarning1").value = "";
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;


            if (batchUploadSelected == "All") {
                document.getElementById('btnSubmit').style.visibility='hidden';
                document.getElementById("btnWarning1").value = "Please select batch number!";
            }

           $("#btnSubmit").click(function () {
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
              $.ajax({
                type: "POST",
                url: '@Url.Action("SubmitBatch")',
                data: '{ batchno : "' + batchUploadSelected + '" }',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    alert("The batch has been confirmed successfully!");
                    location.reload(true);
                },
                  error: function () {
                   document.getElementById('btnSubmit').style.visibility='hidden';
                   document.getElementById("btnWarning1").value = "Cannot Confirm Batch. Please Check With Administrator.";
                }
            });

            return false;
        });
    }

    function RejectBatch() {
            document.getElementById("myForm2").style.display = "block";
            document.getElementById('btnDelete').style.visibility = 'visible';
            document.getElementById("btnWarning2").value = "";
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;

            if (batchUploadSelected == "All") {
                document.getElementById('btnDelete').style.visibility='hidden';
                document.getElementById("btnWarning2").value = "Please select batch number!";
            }

           $("#btnDelete").click(function () {
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            alert(batchUploadSelected);
              $.ajax({
                type: "POST",
                url: '@Url.Action("RejectConfirmBatch")',
                data: '{ batchno : "' + batchUploadSelected + '" }',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                  success: function (data) {
                    alert("The batch has been rejected successfully!");
                    location.reload(true);
                },
                  error: function () {
                   document.getElementById('btnDelete').style.visibility='hidden';
                   document.getElementById("btnWarning2").value = "Cannot Delete Batch. Please Check With Administrator!";
                }
            });

            return false;
        });
    }

        jQuery.extend(jQuery.fn.dataTableExt.oSort, {
            "customDate-pre": function (a) {
                var ukDatea = a.split('/');
                return (ukDatea[2] + ukDatea[1] + ukDatea[0]) * 1;
            },

            "customDate-asc": function (a, b) {
                return ((a < b) ? -1 : ((a > b) ? 1 : 0));
            },

            "customDate-desc": function (a, b) {
                return ((a < b) ? 1 : ((a > b) ? -1 : 0));
            }
        });
        Date.prototype.toFormattedDate = function () {
            var dd = this.getDate();
            if (dd < 10) dd = '0' + dd;
            var mm = this.getMonth() + 1;
            if (mm < 10) mm = '0' + mm;
            var yyyy = this.getFullYear();
            /* change format here */
            return String(dd + "/" + mm + "/" + yyyy);
        };

        var MSR = function (data) {

            var self = this;
            this.ID = ko.observable(data.ID);
            this.EntryNo = ko.observable(data.EntryNo);
            this.JournalTemplateName = ko.observable(data.JournalTemplateName);
            this.JournalBatchName = ko.observable(data.JournalBatchName);
            this.JVNo = ko.observable(data.JVNo);
            this.PostingDate = ko.observable(data.PostingDate);
            this.AccountType = ko.observable(data.AccountType);
            this.AccountNo = ko.observable(data.AccountNo);
            this.AccountNumber = ko.observable(data.AccountNumber);
            this.Beneficiary = ko.observable(data.Beneficiary);
            this.BankName = ko.observable(data.BankName);
            this.AccountCategory = ko.observable(data.AccountCategory);
            this.Description = ko.observable(data.Description);
            this.DebitAmount = ko.observable(data.DebitAmount);
            this.CreditAmount = ko.observable(data.CreditAmount);
            this.ReferenceNo = ko.observable(data.ReferenceNo);
            this.BusinessUnit = ko.observable(data.BusinessUnit);
            this.Branch = ko.observable(data.Department);
            this.LineNo = ko.observable(data.LineNo);
            this.IntegrationStatus = ko.observable(data.IntegrationStatus);
            this.DateTimeTransferred = ko.observable(data.DateTimeTransferred);
            this.Segment = ko.observable(data.Segment);
            this.SubSegment = ko.observable(data.SubSegment);
            this.DocumentDate = ko.observable(data.DocumentDate);
            this.DetailURL = ko.observable(data.DetailURL);
            this.DownloadFile = ko.observable(data.DownloadFile);
            this.ShowButton = ko.observable(data.ShowButton);

        };

    //function NumberFormatter(number, decimals, dec_point, thousands_sep) {
    //    var n = !isFinite(+number) ? 0 : +number,
    //        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
    //        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
    //        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
    //        toFixedFix = function (n, prec) {
    //            var k = Math.pow(10, prec);
    //            return Math.round(n * k) / k;
    //        },
    //        s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');
    //    if (s[0].length > 3) {
    //        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
    //    }
    //    if ((s[1] || '').length < prec) {
    //        s[1] = s[1] || '';
    //        s[1] += new Array(prec - s[1].length + 1).join('0');
    //    }
    //    return s.join(dec);
    //}

     var ViewModel = new function () {
            var self = this;
         var defaultDropdownText = 'All';
         localStorage.removeItem("BatchUpload");
          //  var defaultDropdownTextStatus = 'Draft';
         //   var defaultdate = new Date().toFormattedDate();
            self.pageSize = ko.observable(100);
            self.indexPage = ko.observable(0);
            self.totalPage = ko.observable(1);
            self.totalRow = ko.observable(0);
            self.totalDb = ko.observable(0);
            self.totalCr = ko.observable(0);
            self.differenttot = ko.observable(0);
            self.hocs = ko.observableArray([]);
            self.formVendorSearch = ko.observable("");

            var defaultdate = new Date().toFormattedDate();
            self.availableProjectName = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.ProjectDesc){<text>'@item',</text>}]);
            self.availableBatchUpload = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.BatchUpload){<text>'@item',</text>}]);
            self.availableStatus = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.StatusData){<text>'@item',</text>}]);
            self.availableJVNo = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.JVNo){<text>'@item',</text>}]);
            self.availableAccountNo = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.AccountNo){<text>'@item',</text>}]);
            self.availableBatchType = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.BatchType){<text>'@item',</text>}]);

            self.selectedProjectName = ko.observable(defaultDropdownText);
            self.selectedBatchUpload = ko.observable(defaultDropdownText);
            self.selectedStatus = ko.observable(defaultDropdownText);
            self.selectedJVNo = ko.observable(defaultDropdownText);
            self.selectedAccountNo = ko.observable(defaultDropdownText);
            self.selectedBatchType = ko.observable(defaultDropdownText);

            self.nextPage = function () {
                if ((self.indexPage() + 1) < self.totalPage()) {
                    self.indexPage(self.indexPage() + 1);
                    self.loadhoc();
                }
            }
            self.prevPage = function () {
                if (self.indexPage() > 0) {
                    self.indexPage(self.indexPage() - 1);
                    self.loadhoc();
                }
            }

            self.loadhoc = function () {
                self.hocs.removeAll();
                var prevBatch = localStorage.getItem("BatchUpload");

                $.ajax('@Url.Action("GetOnlineBankBatch", "CashCollectTransfer")', {
                    data: ko.toJSON({
                        search: self.formVendorSearch(),
                        pageSize: self.pageSize(),
                        pageIndex: self.indexPage(),
                        totalDb: self.indexPage(),
                        totalCr: self.indexPage(),
                        differenttot: self.indexPage(),
                        projectname: self.selectedProjectName(),
                        statusdata: self.selectedStatus(),
                        prevbacthupload: prevBatch,
                        jvno: self.selectedJVNo(),
                        accountno: self.selectedAccountNo(),
                        batchupload: self.selectedBatchUpload(),
                        batchtype: self.selectedBatchType(),

                    }),

                    type: "post",
                    contentType: "application/json",
                    success: function (result) {
                        self.hocs.removeAll();
                        var underlyingArray = self.hocs();
                        for (var i = 0; i < result.hocs.length; i++) {
                            var row = result.hocs[i];
                            var record = {
                                ID: row.ID,
                                EntryNo: row.EntryNo,
                                JournalTemplateName: row.JournalTemplateName,
                                JournalBatchName: row.JournalBatchName,
                                JVNo: row.JVNo,
                                PostingDate: row.PostingDate,
                                AccountType: row.AccountType,
                                AccountNo: row.AccountNo,
                                AccountNumber: row.AccountNumber,
                                Beneficiary: row.Beneficiary,
                                BankName: row.BankName,
                                AccountCategory: row.AccountCategory,
                                Description: row.Description,
                                DebitAmount: row.DebitAmount,
                                CreditAmount: row.CreditAmount,
                                ReferenceNo: row.ReferenceNo,
                                BusinessUnit: row.BusinessUnit,
                                Branch: row.Department,
                                LineNo: row.LineNo,
                                IntegrationStatus: row.IntegrationStatus,
                                DateTimeTransferred: row.DateTimeTransferred,
                                Segment: row.Segment,
                                SubSegment: row.SubSegment,
                                DocumentDate: row.DocumentDate,
                                DetailURL: row.DetailURL,
                                DownloadFile: row.DownloadFile,
                                ShowButton: row.ShowButton,
                            }
                            underlyingArray.push(record);
                        }
                        self.hocs.valueHasMutated();
                        self.totalPage(result.totalPage);
                        self.totalRow(result.totalRow);
                        self.totalDb(result.totalDb);
                        self.totalCr(result.totalCr);
                        self.differenttot(result.differenttot);
                        $('#dialog-Loading').dialog("close");

                    },
                    error: function (error) {
                        $.notify(
                            error.responseText, {
                                position: "top center",
                                className: "error"
                            }
                        );
                        $('#dialog-Loading').dialog("close");
                    }
                });
            }

            self.restartSearchPagination = function () {
                self.hocs.removeAll();
                self.indexPage(0);
                self.totalPage(1);
                self.totalRow(0);
                self.totalDb(0);
                self.totalCr(0);
                self.differenttot(0);
            }
            self.formVendorSearch.subscribe(function (value) {
                if (value == '') self.formVendorSearch("");

                self.restartSearchPagination();
                self.loadhoc();
            });
            self.pageSize.subscribe(function (value) {
                if (self.formVendorSearch() == '') self.formVendorSearch("");
                self.restartSearchPagination();
                self.loadhoc();
            });

            self.vendorsComputed = ko.computed(function () {
                var records = self.hocs;
                return records;
            });
            self.selectedProjectName.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
            });
               self.selectedStatus.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
               });

             self.selectedBatchType.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
             });

           self.selectedAccountNo.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
           });

          self.selectedJVNo.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                var tempJVId = document.getElementById("JVid").value;
                var selectedBatch = document.getElementById("batchUploadSelect").value;
                //alert(tempJVId);
                //alert(selectedBatch);
                localStorage.setItem('BatchUpload', selectedBatch);
                self.loadhoc();
          });

              self.selectedBatchUpload.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                  self.restartSearchPagination();
                //  var tempBatch = value;
                //  var tempJVId = document.getElementById("JVid").value;
                ////  alert(tempBatch);
                //  alert("Batch tukar " + tempJVId);

                  //if (tempBatch == "All") {
                  //    localStorage.setItem('JVID', "All");
                  //    document.getElementById("JVid").value = "All";
                  //}
                  //if (tempBatch != "All") {
                  //    localStorage.setItem('JVID', tempJVId);
                  //}

                 // document.getElementById("JVid").value = "All";

                  self.loadhoc();
              });
            self.loadhoc();

            function addCommas(nStr) {
                nStr += '';
                x = nStr.split('.');
                x1 = x[0];
                x2 = x.length > 1 ? '.' + x[1] : '';
                var rgx = /(\d+)(\d{3})/;
                while (rgx.test(x1)) {
                    x1 = x1.replace(rgx, '$1' + ',' + '$2');
                }
                return x1 + x2;
            }
              var formatted = addCommas(12345678.88)
              $('#withComma').val(formatted);
    };

    $(document).ready(function () {

          document.getElementById('btntoSubmit').style.visibility = 'hidden';
          document.getElementById('btnDownLoad').style.visibility = 'hidden';
          document.getElementById('gentxtfile').style.visibility = 'hidden';
     });


        $(document).ready(function () {

            $('#StartDate').datepicker({
                todayBtn: "linked",
                format: "dd/mm/yyyy",
                keyboardNavigation: false,
                forceParse: false,
                calendarWeeks: true,
                autoclose: true,
            }).datepicker("setDate", new Date());

            ko.bindingHandlers.numericText = {
                update: function (element, valueAccessor, allBindingsAccessor) {
                    var value = ko.utils.unwrapObservable(valueAccessor()),
                        precision = ko.utils.unwrapObservable(allBindingsAccessor().precision) || ko.bindingHandlers.numericText.defaultPrecision,
                        formattedValue = value.toFixed(precision);

                    ko.bindingHandlers.text.update(element, function () { return formattedValue; });
                },
                defaultPrecision: 1
            };

            ko.applyBindings(ViewModel);
            ViewModel.loadhoc();

        });

    function DisplayMainButton() {

        document.getElementById('btntoSubmit').style.visibility = 'hidden';
        document.getElementById('btnDownLoad').style.visibility = 'hidden';
        document.getElementById('gentxtfile').style.visibility = 'hidden';

        var selectedValBatch = document.getElementById("batchUploadSelect").value;
        var selectedValBank = document.getElementById("AccountId").value;


       // alert(selectedValStatus);

        if ((selectedValBatch != 'All') && (selectedValBank == 'All') && (selectedValStatus == 'Pending NAV Integration')) {
            document.getElementById('btntoSubmit').style.visibility = 'visible';
            document.getElementById('btnDownLoad').style.visibility = 'hidden';
            document.getElementById('gentxtfile').style.visibility = 'hidden';
        }


         if ((selectedValBatch != 'All') && (selectedValBank != 'All') ) {
            document.getElementById('btntoSubmit').style.visibility = 'hidden';
            document.getElementById('btnDownLoad').style.visibility = 'visible';
            document.getElementById('gentxtfile').style.visibility = 'visible';
        }

    }

    function openForm1() {
        document.getElementById("myForm1").style.display = "block";
    }

    function closeForm1() {
          document.getElementById("myForm1").style.display = "none";
    }
    function openForm2() {
        document.getElementById("myForm2").style.display = "block";
    }

    function closeForm2() {
          document.getElementById("myForm2").style.display = "none";
    }

    </script>
}

