@model Core.Entities.Data.Kenderaan.JobOrder
@{ ViewBag.Title = "Create Job Order";
    string fileUploadPath = "/FileUpload/";
}

<div class="wrapper wrapper-content">
    <div class="row">

        @using (Html.BeginForm("Create", "JobOrder", FormMethod.Post, new { enctype = "multipart/Form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <div class="col-lg-12">
                <div class="ibox float-e-margins">
                    <div class="ibox-content" style="background-color:#f7f5f5;">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="pull-left btn btn-xs btn-primary btn-block" style="font-weight:bolder; background-color:#368; border-color:#368;">Create New Job Order</label>
                            </div>
                            @Html.ValidationSummary( "", new { @style = "color: red" })
                            <div class="welldetailsContactedit" style="background-color:#c5e5fa;">
                                <br />
                                <div class="wellpob" style="min-height:350px;  background-color:#c5e5fa; padding:10px;  margin-bottom:20px;">
                                    <div class="circle-border">
                                        <div class="col-lg-4">
                                            <div class="form-group">
                                                @Html.Label("Job Order#", new { @class = "control-label col-md-4" })
                                                <div class="col-md-7">
                                                    @Html.TextBox("JobOrderNo", ViewData["JobOrderNo"], new { id = "jocode", @class = "form-control", @readonly = "readonly", @style = "font-size:12px;height:30px;color:black;background-color: #edfcf9;" })
                                                    @Html.ValidationMessageFor(model => model.JobOrderNo)
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.BusinessUnit, "Business Unit", new { @class = "control-label col-md-4", @style = "font-size:12px;height:30px;", @required = "required" })
                                                <div class="col-md-7">
                                                    @Html.DropDownList("BusinessUnit", ViewData["BusinessUnit"] as SelectList, "--Select Business Unit--", htmlAttributes: new { @id = "bizunit", @class = "form-control", onchange = "FuncBranch(this.value), FuncBranchCharge(this.value), FuncWorkshop(this.value)", @required = "required", @style = "font-size:12px;height:30px;" })
                                                    @Html.HiddenFor(model => model.BusinessUnit)
                                                    @Html.ValidationMessageFor(model => model.BusinessUnit)
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.BranchID, "Branch", new { @class = "control-label col-md-4", @style = "font-size:12px;height:30px;", @required = "required" })
                                                <div class="col-md-7">
                                                    @Html.DropDownList("BranchID", ViewData["BranchID"] as SelectList, "--Select Branch--", htmlAttributes: new { @class = "form-control", onchange = "FuncVehicle(this.value)", @required = "required", @style = "font-size:12px;height:30px;" })
                                                    @Html.HiddenFor(model => model.BranchID)
                                                    @Html.ValidationMessageFor(model => model.BranchID)
                                                </div>
                                            </div>
                                            @*<div class="form-group">
            @Html.LabelFor(model => model.ChargeTo_BranchID, "Charge To Branch", new { @class = "control-label col-md-4", @style = "font-size:12px;height:30px;", @required = "required" })
            <div class="col-md-7">
                @Html.DropDownList("ChargeTo_BranchID", ViewData["ChargeTo_BranchID"] as SelectList, "--Select Branch--", htmlAttributes: new {  @class = "form-control", @required = "required", @style = "font-size:12px;height:30px;" })
                @Html.HiddenFor(model => model.ChargeTo_BranchID)
                @Html.ValidationMessageFor(model => model.ChargeTo_BranchID)
            </div>
        </div>*@
                                            <div class="group">
                                                @Html.LabelFor(model => model.JobDate, "Job Order Date", new { @class = "control-label col-md-4", @style = " " })
                                                <div class="input-group date col-md-7" style="padding-left:3px">
                                                    <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                                    @Html.TextBoxFor(model => model.JobDate, "DateTime", new { @class = "form-control", @style = "font-size:12px;height:30px;", @id = "JODate", onkeyup = "sync(this)" })
                                                    @Html.ValidationMessageFor(model => model.JobDate)
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.VehicleID, "Vehicle#", new { @class = "control-label col-md-4" })
                                                <div class="col-md-7">
                                                    @Html.DropDownList("VehicleID", ViewData["VehicleID"] as SelectList, "--Select Vehicle--", htmlAttributes: new { @class = "form-control", @required = "required", @style = "font-size:12px;height:30px;" })
                                                    @Html.HiddenFor(model => model.VehicleID)
                                                    @Html.ValidationMessageFor(model => model.VehicleID)
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-lg-pull-12">
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.JobOrderNo, "Job Order Category", new { @class = "control-label col-md-9" })
                                                        <div class="col-md-9 m-c-xl" style="width:425px">
                                                            @Html.DropDownList("ServiceType", (IEnumerable<SelectListItem>)Session["ServiceType"], new { @class = "form-control chosen-select m-b-xs", id = "witnessId", @multiple = "multiple" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-4" style="padding-left:20px;">
                                            <div class="row">
                                                @Html.LabelFor(model => model.CurrentSpeedoKM, "Current Speedo KM", new { @class = "control-label col-sm-6" })
                                                <div class="col-md-6">
                                                    @Html.EditorFor(model => model.CurrentSpeedoKM, new { htmlAttributes = new { @class = "form-control", @required = "required", @style = "font-size:12px;height:30px;" } })
                                                    @Html.ValidationMessageFor(model => model.CurrentSpeedoKM)
                                                </div>
                                            </div>
                                            <div class="row">
                                                @Html.LabelFor(model => model.NextServiceKM, "Next Service KM", new { @class = "control-label col-sm-6" })
                                                <div class="col-md-6">
                                                    @Html.EditorFor(model => model.NextServiceKM, new { htmlAttributes = new { @class = "form-control", @required = "required", @style = "font-size:12px;height:30px;" } })
                                                    @Html.ValidationMessageFor(model => model.NextServiceKM)
                                                </div>
                                            </div>
                                            <div class="row">
                                                @Html.LabelFor(model => model.EstimateCost, "Estimate Cost (RM)", new { @class = "control-label col-sm-6" })
                                                <div class="col-md-6">
                                                    @Html.EditorFor(model => model.EstimateCost, new { htmlAttributes = new { @class = "form-control", @required = "required", @style = "font-size:12px;height:30px;" } })
                                                    @Html.ValidationMessageFor(model => model.EstimateCost)
                                                </div>
                                            </div>
                                            <div class="row">
                                                @Html.LabelFor(model => model.EstimateTax, "Estimate Tax (RM)", new { @class = "control-label col-sm-6" })
                                                <div class="col-md-6">
                                                    @Html.EditorFor(model => model.EstimateTax, new { htmlAttributes = new { @class = "form-control", @required = "required", @style = "font-size:12px;height:30px;" } })
                                                    @Html.ValidationMessageFor(model => model.EstimateTax)
                                                </div>
                                            </div>
                                            <div class="row">
                                                @Html.LabelFor(model => model.EstimateTotal, "Estimate Total (RM)", new { @class = "control-label col-sm-6" })
                                                <div class="col-md-6">
                                                    @Html.EditorFor(model => model.EstimateTotal, new { htmlAttributes = new { @class = "form-control", @required = "required", @style = "font-size:12px;height:30px;" } })
                                                    @Html.ValidationMessageFor(model => model.EstimateTotal)
                                                </div>
                                            </div>
                                       
                                        </div>
                                        <div class="col-lg-4" style="padding-left:45px;">
                                            <div class="group">
                                                @Html.LabelFor(model => model.QuotationDocLink, "Quotation ", new { @class = "control-label col-sm-4" })
                                                <div class="col-md-8">
                                                    <input type="file" name="file" id="file" style="width:100%" />
                                                </div>
                                            </div>
                                            <div class="group">
                                                @Html.LabelFor(model => model.QuotationDocLink, "Photo ", new { @class = "control-label col-sm-4" })
                                                <div class="col-md-8">
                                                    <input type="file" name="file" id="file" style="width:100%" />
                                                </div>
                                            </div>
                                            <div class="group">
                                                @Html.LabelFor(model => model.OtherDocumentLink, "Other Doc. ", new { @class = "control-label col-sm-4" })
                                                <div class="col-md-8">
                                                    <input type="file" name="file" id="file" style="width:100%" />
                                                </div>
                                            </div>
                                            <div class="group">
                                                @Html.LabelFor(model => model.VendorID, "Workshop", new { @class = "control-label col-md-4" })
                                                <div class="col-md-8">
                                                    @Html.DropDownList("VendorID", ViewData["VendorID"] as SelectList, "Please Select", htmlAttributes: new { @class = "form-control", @required = "required", @style = "font-size:12px;height:30px;" })
                                                    @Html.ValidationMessageFor(model => model.VendorID)
                                                </div>
                                            </div>

                                        </div>
                                        <div class="wellh2" style=" padding-top: 30px; margin-bottom: 2px; background-color: #c5e5fa;">
                                            <div class="col-md-12" style="padding-left:5px;padding-top:20px;">

                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ServiceDescription, "Job Order Description", new { @class = "control-label" })
                                                    <div class="col-md-12 m-b-xs">
                                                        @Html.TextAreaFor(model => model.ServiceDescription, new { @class = "form-control ", id = "immediateActionId", @style = "font-size:12px;", rows = "5", @placeholder = "Please specify job order description, 1000 character maximum..." })
                                                        @Html.ValidationMessageFor(model => model.ServiceDescription)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-offset-5 col-md-9">
                            <input type="submit" value="Save & Next Page" class="btn btn-primary" />
                            @Html.ActionLink("Cancel", "IndexJO", null, new { @class = "btn btn-white" })
                        </div>
                    </div>
                </div>
            </div>

        }
    </div>
</div>


@section Styles {
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/plugins/wizardStepsStyles")
    @Styles.Render("~/plugins/clockpickerStyles")
    @Styles.Render("~/plugins/dataPickerStyles")
    @Styles.Render("~/plugins/imagecropperStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
    @Styles.Render("~/Content/plugins/blueimp/css/")

}

@section Scripts {
    @Scripts.Render("~/plugins/wizardSteps")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/clockpicker")
    @Scripts.Render("~/plugins/imagecropper")
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/lightboxGallery")
    @Scripts.Render("~/plugins/dropZone")

    @Scripts.Render("~/plugins/notifyjs")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/dataTables")

    

<script type="text/javascript">

         function FuncBranch(bizUnit) {
              if (bizUnit== null || bizUnit == "") {
                  $('#BranchID').html(""); // clear before appending new list
                  $('#BranchID').append(
                      $('<option></option>').val("").html("--Select Branch--"));
              }
              else {
                  $.ajax({
                      url: '@Url.Action("FillBranch", "Branch", new { area = "Administrator" })',
                      type: "POST",
                      dataType: "JSON",
                      data: {
                         bizUnit: bizUnit
                      },

                      success: function (results) {
                          $('#BranchID').html(""); // clear before appending new list
                          $('#BranchID').append(
                          $('<option></option>').val("").html("--Select Branch--"));
                          $.each(results, function (i, results) {
                              $('#BranchID').append(
                                  $('<option></option>').val(results.ID).html(results.BranchName));
                          });
                      },
                      error: function (error) {
                          $.notify(
                              error,
                              { position: "top center", className: "Please Select A Correct Branch" }
                          );
                      }
                  });
              }
            }

     function FuncBranchCharge(bizUnit) {
              if (bizUnit== null || bizUnit == "") {
                  $('#ChargeTo_BranchID').html(""); // clear before appending new list
                  $('#ChargeTo_BranchID').append(
                      $('<option></option>').val("").html("--Select Branch--"));
              }
              else {
                  $.ajax({
                      url: '@Url.Action("FillBranch", "Branch", new { area = "Administrator" })',
                      type: "POST",
                      dataType: "JSON",
                      data: {
                         bizUnit: bizUnit
                      },

                      success: function (results) {
                          $('#ChargeTo_BranchID').html(""); // clear before appending new list
                          $('#ChargeTo_BranchID').append(
                          $('<option></option>').val("").html("--Select Branch--"));
                          $.each(results, function (i, results) {
                              $('#ChargeTo_BranchID').append(
                                  $('<option></option>').val(results.ID).html(results.BranchName));
                          });
                      },
                      error: function (error) {
                          $.notify(
                              error,
                              { position: "top center", className: "Please Select A Correct Business Unit" }
                          );
                      }
                  });
              }
            }


                function FuncVehicle(branch) {

                    if (branch == null || branch == "") {
                  $('#VehicleID').html(""); // clear before appending new list
                  $('#VehicleID').append(
                      $('<option></option>').val("").html("Please Select"));
              }
              else {
                  $.ajax({
                      url: '@Url.Action("FillVehicle", "VehicleMaster", new { area = "Vehicle" })',
                      type: "POST",
                      dataType: "JSON",
                      data: {
                          branch: branch
                      },

                      success: function (results) {
                          $('#VehicleID').html(""); // clear before appending new list
                          $('#VehicleID').append(
                      $('<option></option>').val("").html("--Select Vehicle--"));
                          $.each(results, function (i, results) {
                              $('#VehicleID').append(
                                  $('<option></option>').val(results.ID).html(results.VehicleNo));
                          });
                      },
                      error: function (error) {
                          $.notify(
                              error,
                              { position: "top center", className: "Please Select A Correct Business Unit" }
                          );
                      }
                  });
              }

          }


          function FuncWorkshop(bizUnit) {
              if (bizUnit == null || bizUnit == "") {
                  $('#VendorID').html(""); // clear before appending new list
                  $('#VendorID').append(
                      $('<option></option>').val("").html("--Select Workshop--"));
              }
              else {
                  $.ajax({
                      url: '@Url.Action("FillWorkshop", "WorkShop", new { area = "Vehicle" })',
                      type: "POST",
                      dataType: "JSON",
                      data: {
                          bizUnit : bizUnit
                      },

                      success: function (results) {
                          $('#VendorID').html(""); // clear before appending new list
                          $('#VendorID').append(
                      $('<option></option>').val("").html("--Select Workshop--"));
                          $.each(results, function (i, results) {
                              $('#VendorID').append(
                                  $('<option></option>').val(results.ID).html(results.VendorName));
                          });
                      },
                      error: function (error) {
                          $.notify(
                              error,
                              { position: "top center", className: "error" }
                          );
                      }
                  });
              }

    }

            $('#bizunit').change(function () {
                var comments = $('#bizunit').val();
                $.ajax({
                    url: "/JobOrder/FillJobOrderRunNo",
                    dataType: "json",
                    type: "GET",
                    contentType: 'application/json; charset=utf-8',
                    cache: false,
                    data: { strSelected: comments },
                    success: function (data) {
                        if (data.success) {
                            jocode: $("#jocode").val(data.joborderCode);
                        }
                    },
                    error: function (xhr) {
                        alert('error');
                    }
                });
            });

         //$('#branch').change(function () {
         //       var branchval = $('#branch').val();
         //       branch1: $("#branch1").val(branchval);
         //});



            $(document).ready(function () {

            $("#JODate").datepicker({
                todayBtn: "linked",
                format: "dd/mm/yyyy",
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true
            }).datepicker("setDate", new Date());


            var config = {
                '.chosen-select': {},
                '.chosen-select-deselect': { allow_single_deselect: true },
                '.chosen-select-no-single': { disable_search_threshold: 10 },
                '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
                '.chosen-select-width': { width: "95%" }
            }
            for (var selector in config) {
                $(selector).chosen(config[selector]);
            }

        });

</script>
}
