@using AspNetGroupBasedPermissions.Helpers
@{ ViewBag.Title = "Online Payment";}

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content" style="height:30px; color:white; background-color:#368">
                    <section class="content-header">
                        <h4>
                            @ViewBag.title
                            <small style="color:white">: Verify Uploaded Data</small>
                        </h4>
                    </section>
                </div>
                <div class="ibox-content dataTables_scroll dataTables_wrapper form-inline no-foote" style="min-height:40px; color:black; background-color:#368">
                    <div class="dataTables_filter dataTables_length dataTables_length pull-right">
                        <label>
                            <select class="form-control input-sm" style="width:80px;font-size:11px" data-bind="value:pageSize">
                                <option value="10">10/page</option>
                                <option value="25">25/page</option>
                                <option value="50">50/page</option>
                                <option value="100">100/page</option>
                            </select>
                        </label>
                        <label><input type="text" class="form-control input-sm" style="font-size:11px" data-bind="value: formVendorSearch, valueUpdate: 'keyup'" placeholder="Search">&nbsp;</label>
                        <div class="dataTables_filter dataTables_length dataTables_length pull-right">
                            <button id="btntoGL" onclick="GeneralJournal();" class="pull-left btn btn-primary btn-xs" style="margin-left:1px; margin-right:1px">Generate Journal</button>
                            <button id="btntoSubmit" onclick="SubmitBatch();" class="pull-left btn btn-primary btn-xs" style="margin-left:1px; margin-right:1px">Submit To Account</button>
                            <button id="btntoReject" onclick="RejectBatch();" class="pull-left btn btn-primary btn-xs" style="margin-left:1px; margin-right:1px">Reject</button>
                        </div>
                    </div>
                </div>

                <div class="ibox-content">
                    <div class="dataTables_scroll dataTables_wrapper form-inline no-footer">
                        <table id="mainTable" class="table table-striped table-bordered table-hover dataTables-example">
                            <thead>
                                <tr>
                                    <td data-bind="style : {width: '5%' } ">
                                        <select data-bind="options:availableProjectName, value:selectedProjectName" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select data-bind="options:availableBatchUpload, value:selectedBatchUpload" id="batchUploadSelect" onchange="DisplayMainButton()"  class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td data-bind="style : {width: '6%' } ">
                                        <select data-bind="options:availableStatus, value:selectedStatus" id="statusbatch" class="form-control input-xs" style="font-size:11px;height:28px"></select>
                                    </td>
                                    <td></td>
                                </tr>
                                <tr style="background:black;color:white">
                                    <th>Project Name</th>
                                    <th>Data Upload#</th>
                                    <th>Location Code</th>
                                    <th>Post Code</th>
                                    <th>Operation Date</th>
                                    <th>Collection Date</th>
                                    <th>Batch Number</th>
                                    <th>Notes</th>
                                    <th>Coins</th>
                                    <th>Remarks</th>
                                    <th>Status</th>
                                    <th><input name="select_all" type="hidden" disabled></th>
                                </tr>
                            </thead>
                            <tbody data-bind="dataTablesForEach:
                                   @Html.Partial("_IndexColumn12")
                                <tr>
                                    <td data-bind="text:ProjectName, style : {width: '5%' } "></td>
                                    <td data-bind="text:RecBatchNumber, style : {width: '5%' } "></td>
                                    <td data-bind="text:LocationCode, style : {width: '7%' } "></td>
                                    <td data-bind="text:KioskPostCode, style : {width: '8%' } "></td>
                                    <td data-bind="text:OperationDate, style : {width: '7%' } "></td>
                                    <td data-bind="text:CollectionDate, style : {width: '7%' } "></td>
                                    <td data-bind="text:BatchNumber, style : {width: '8%' } "></td>
                                    @*<td data-bind="style : {width: '12%' } ">
                                        <span data-bind="text:NumberFormatter(Notes(), 2, '.', ',')"></span>
                                    </td>*@
                                    <td data-bind="numericText: Notes, precision: 2, style : {textAlign: 'right' ,  width:'8%'}"></td>
                                    <td data-bind="numericText: Coins, precision: 2, style : {textAlign: 'right' ,  width:'6%'}"></td>
                                    <th data-bind="text:Remarks, style : {textAlign: 'left' , color: 'red', width:'8%'} "></th>
                                    <td data-bind="text:Status, style : {textAlign: 'left' ,  width:'5%'} "></td>
                                    <td data-bind="style : {width: '4%' } ">
                                        <a data-bind="visible:ShowButton==true,attr: { href: DetailURL}" title="Click To View" style="font-size:10px" class="btn-primary">View</a>
                                    </td>
                                </tr>
                            </tbody>
                            <tr>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th style="background: black; color:white;">Total</th>
                                <th data-bind="numericText: totalNote, precision: 2, style : {textAlign: 'right' , color: 'white' ,background: 'red', width:'10%'}"></th>
                                <th data-bind="numericText: totalCoin, precision: 2, style : {textAlign: 'right' , color: 'white' ,background: 'red',   width:'10%'}"></th>
                                <th style="background: black; color:white;">Grand Total</th>
                                <th data-bind="numericText: grandTotal, precision: 2, style : {textAlign: 'right' , color: 'white' ,background: 'red',   width:'10%'}"></th>
                                <th></th>
                            </tr>
                        </table>
                        <div class="dataTables_info">
                            Showing <label data-bind="text: totalRow()==0 ? 0 : (indexPage()*pageSize())+1"></label> to <label data-bind="text: (indexPage()+1)*pageSize() > totalRow() ? totalRow():(indexPage()+1)*pageSize()"></label> of <label data-bind="text: totalRow"></label> entries
                        </div>
                        <div class="dataTables_paginate paging_simple_numbers">
                            <ul class="pagination">
                                <li class="paginate_button previous" data-bind="click: prevPage, disable: indexPage()==0, css: { 'disabled': indexPage()==0}" tabindex="0"><a href="#">Previous</a></li>
                                <li class="paginate_button active" tabindex="0"><a href="#"><label data-bind="text: indexPage()+1"></label></a></li>
                                <li class="paginate_button next" data-bind="click: nextPage, disable: (indexPage()+1)==totalPage(), css: { 'disabled': (indexPage()+1)==totalPage()}" tabindex="0"><a href="#">Next</a></li>
                            </ul>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div id="myForm1" class="form-popup" style="">
    <div id="scandiv" class="panel panel-primary" style="min-width:50px;min-height:100px;">
        <div class="panel-heading">
            <h3 class="panel-title" style="min-height:15px;">
                Are You Sure Want To Submit This Batch To AP/Payment Department?
            </h3>
        </div>
        <div class="panel-body">
            <div class="form-group" style="padding-top:10px;padding-left:30px">
                <input type="text" disabled="disabled" id="btnWarning1" style="min-width:280px;color:red;background-color:white;border:white;padding-bottom:15px;">
                <input class="btn btn-primary" name="submitButton" id="btnSubmit" value="Submit Batch" type="button">
                <button type="button" class="btn cancel btn btn-xs btn-white" onclick="closeForm1()">Cancel</button>
            </div>
        </div>
    </div><hr />
</div>

<div id="myForm2" class="form-popup" style="">
    <div id="scandiv" class="panel panel-primary" style="min-width:50px;min-height:100px;">
        <div class="panel-heading">
            <h3 class="panel-title" style="min-height:15px;">
                Are You Sure Want To Delete This Batch?
            </h3>
        </div>
        <div class="panel-body">
            <div class="form-group" style="padding-top:10px;padding-left:30px">
                <input type="text" disabled="disabled" id="btnWarning2" style="min-width:280px;color:red;background-color:white;border:white;padding-bottom:15px;">
                <input class="btn btn-primary" name="submitButton" id="btnDelete" value="Confirm Delete" type="button">
                <button type="button" class="btn cancel btn btn-xs btn-white" onclick="closeForm2()">Cancel</button>
            </div>
        </div>
    </div><hr />
</div>


@section Styles {
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
    <style>
        /* The popup form - hidden by default */
        .form-popup {
            display: none;
            position: fixed;
            bottom: 250px;
            right: 420px;
            left: 470px;
            border: 3px solid #f1f1f1;
            z-index: 9;
        }

        .ui-dialog-3000 {
            z-index: 3000 !important;
        }

        .ui-dialog-2900 {
            z-index: 2900 !important;
        }

        .disable-background-eee {
            background: #eee !important;
        }

        .dataTables_scroll {
            overflow: auto;
            position: relative;
        }

        .backgroundSelected {
            background-color: rgb(102, 204, 204) !important;
        }

        .label_p {
            display: inline-block;
            max-width: 100%;
            margin-bottom: 0px;
            font-weight: normal !important;
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/plugins/dataTables")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/app/knockoutDatatableCheckbox")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/plugins/dataPicker")
    @Scripts.Render("~/plugins/notifyjs")

    <script type="text/javascript">

    function SubmitBatch() {

            document.getElementById("myForm1").style.display = "block";
            document.getElementById('btnSubmit').style.visibility = 'visible';
            document.getElementById("btnWarning1").value = "";
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            

            if (batchUploadSelected == "All") {
              //  alert(batchUploadSelected);
                document.getElementById('btnSubmit').style.visibility='hidden';
                document.getElementById("btnWarning1").value = "Please select batch number!";
            }

           $("#btnSubmit").click(function () {
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            //alert(batchUploadSelected);
              $.ajax({
                type: "POST",
                url: '@Url.Action("SubmitBatch")',
                data: '{ batchno : "' + batchUploadSelected + '" }',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    alert("The batch has been confirmed successfully!");
                    location.reload(true);
                },
                  error: function () {
                   document.getElementById('btnSubmit').style.visibility='hidden';
                   document.getElementById("btnWarning1").value = "Cannot Confirm Batch. Please Check With Administrator.";
                }
            });
            
            return false;
        });
    }

    function RejectBatch() {
            document.getElementById("myForm2").style.display = "block";
            document.getElementById('btnDelete').style.visibility = 'visible';
            document.getElementById("btnWarning2").value = "";
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            //alert(batchUploadSelected);

            if (batchUploadSelected == "All") {
              //  alert(batchUploadSelected);
                document.getElementById('btnDelete').style.visibility='hidden';
                document.getElementById("btnWarning2").value = "Please select batch number!";
            }

           $("#btnDelete").click(function () {
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            alert(batchUploadSelected);
              $.ajax({
                type: "POST",
                url: '@Url.Action("RejectConfirmBatch")',
                data: '{ batchno : "' + batchUploadSelected + '" }',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                  success: function (data) {
                    alert("The batch has been rejected successfully!");
                    location.reload(true);
                },
                  error: function () {
                   document.getElementById('btnDelete').style.visibility='hidden';
                   document.getElementById("btnWarning2").value = "Cannot Delete Batch. Please Check With Administrator!";
                }
            });
            
            return false;
        });
    }
          
       function GeneralJournal() {

            document.getElementById("myForm1").style.display = "block";
            document.getElementById('btnSubmit').style.visibility = 'visible';
            document.getElementById("btnWarning1").value = "";
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;

            if (batchUploadSelected == "All") {
              //  alert(batchUploadSelected);
                document.getElementById('btnSubmit').style.visibility='hidden';
                document.getElementById("btnWarning1").value = "Please select batch number!";
            }

           $("#btnSubmit").click(function () {
            var batchUploadSelected = document.getElementById("batchUploadSelect").value;
            //alert(batchUploadSelected);
              $.ajax({
                type: "POST",
                url: '@Url.Action("GeneralJournal")',
                data: '{ batchno : "' + batchUploadSelected + '" }',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    alert("The general journal has been created successfully!");
                    location.reload(true);
                },
                  error: function () {
                   document.getElementById('btnSubmit').style.visibility='hidden';
                   document.getElementById("btnWarning1").value = "Cannot Confirm Batch. Please Check With Administrator.";
                }
            });
            
            return false;
        });
    }

        jQuery.extend(jQuery.fn.dataTableExt.oSort, {
            "customDate-pre": function (a) {
                var ukDatea = a.split('/');
                return (ukDatea[2] + ukDatea[1] + ukDatea[0]) * 1;
            },

            "customDate-asc": function (a, b) {
                return ((a < b) ? -1 : ((a > b) ? 1 : 0));
            },

            "customDate-desc": function (a, b) {
                return ((a < b) ? 1 : ((a > b) ? -1 : 0));
            }
        });
        Date.prototype.toFormattedDate = function () {
            var dd = this.getDate();
            if (dd < 10) dd = '0' + dd;
            var mm = this.getMonth() + 1;
            if (mm < 10) mm = '0' + mm;
            var yyyy = this.getFullYear();
            /* change format here */
            return String(dd + "/" + mm + "/" + yyyy);
        };

        var MSR = function (data) {

            var self = this;
            this.BranchName = ko.observable(data.BranchName);
            this.BusinessUnitName = ko.observable(data.BusinessUnitName);
            this.CustomerCode = ko.observable(data.CustomerCode);
            this.RecBatchNumber = ko.observable(data.RecBatchNumber);
            this.KioskPostCode = ko.observable(data.KioskPostCode);
            this.ProjectName = ko.observable(data.ProjectName);
            this.OperationDate = ko.observable(data.OperationDate );
            this.CollectionDate = ko.observable(data.CollectionDate);
            this.BatchNumber = ko.observable(data.BatchNumber);
            this.Notes = ko.observable(data.Notes).extend({numeric: 2});
            this.Coins = ko.observable(data.Coins);
            this.Status = ko.observable(data.Status);
            this.IsActive = ko.observable(data.IsActive);
            this.Remarks = ko.observable(data.Remarks);
            this.FileName = ko.observable(data.FileName);
            this.UploadDate = ko.observable(data.UploadDate);

            this.DetailURL = ko.observable(data.DetailURL);
            this.ShowButton = ko.observable(data.ShowButton);
        };

    //function NumberFormatter(number, decimals, dec_point, thousands_sep) {
    //    var n = !isFinite(+number) ? 0 : +number,
    //        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
    //        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
    //        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
    //        toFixedFix = function (n, prec) {
    //            var k = Math.pow(10, prec);
    //            return Math.round(n * k) / k;
    //        },
    //        s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');
    //    if (s[0].length > 3) {
    //        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
    //    }
    //    if ((s[1] || '').length < prec) {
    //        s[1] = s[1] || '';
    //        s[1] += new Array(prec - s[1].length + 1).join('0');
    //    }
    //    return s.join(dec);
    //}

     var ViewModel = new function () {
            var self = this;
            var defaultDropdownText = 'All';
          //  var defaultDropdownTextStatus = 'Draft';
         //   var defaultdate = new Date().toFormattedDate();
            self.pageSize = ko.observable(1000);
            self.indexPage = ko.observable(0);
            self.totalPage = ko.observable(1);
            self.totalRow = ko.observable(0);
            self.totalNote = ko.observable(0);
            self.totalCoin = ko.observable(0);
            self.grandTotal = ko.observable(0);
            self.hocs = ko.observableArray([]);
            self.formVendorSearch = ko.observable("");

            var defaultdate = new Date().toFormattedDate();
            self.availableProjectName = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.ProjectDesc){<text>'@item',</text>}]);
            self.availableBatchUpload = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.BatchUpload){<text>'@item',</text>}]);
            self.availableStatus = ko.observableArray([defaultDropdownText,@foreach (var item in ViewBag.StatusData){<text>'@item',</text>}]);

            self.selectedProjectName = ko.observable(defaultDropdownText);
            self.selectedBatchUpload = ko.observable(defaultDropdownText);
            self.selectedStatus = ko.observable(defaultDropdownText);

            self.nextPage = function () {
                if ((self.indexPage() + 1) < self.totalPage()) {
                    self.indexPage(self.indexPage() + 1);
                    self.loadhoc();
                }
            }
            self.prevPage = function () {
                if (self.indexPage() > 0) {
                    self.indexPage(self.indexPage() - 1);
                    self.loadhoc();
                }
            }

            self.loadhoc = function () {
                self.hocs.removeAll();

                $.ajax('@Url.Action("GetCCTransferVerifyData", "CashCollectTransfer")', {
                    data: ko.toJSON({
                        search: self.formVendorSearch(),
                        pageSize: self.pageSize(),
                        pageIndex: self.indexPage(),
                        totalNote: self.indexPage(),
                        totalCoin: self.indexPage(),
                        grandTotal: self.indexPage(),
                        projectname: self.selectedProjectName(),
                        statusdata: self.selectedStatus(),
                        batchupload: self.selectedBatchUpload(),

                    }),

                    type: "post",
                    contentType: "application/json",
                    success: function (result) {
                        self.hocs.removeAll();
                        var underlyingArray = self.hocs();
                        for (var i = 0; i < result.hocs.length; i++) {
                            var row = result.hocs[i];
                            var record = {
                                LocationCode: row.LocationCode,
                                KioskPostCode: row.KioskPostCode,
                                RecBatchNumber: row.RecBatchNumber,
                                ProjectName: row.ProjectName,
                                OperationDate: row.OperationDate,
                                CollectionDate: row.CollectionDate,
                                BatchNumber: row.BatchNumber,
                                Notes: row.Notes,
                                Coins: row.Coins,
                                Status: row.Status,
                                IsActive: row.IsActive,
                                Remarks: row.Remarks,
                                FileName: row.FileName,
                                UploadDate: row.UploadDate,
                                DetailURL: row.DetailURL,
                                ShowButton: row.ShowButton,
                            }
                            underlyingArray.push(record);
                        }
                        self.hocs.valueHasMutated();
                        self.totalPage(result.totalPage);
                        self.totalRow(result.totalRow);
                        self.totalNote(result.totalNote);
                        self.totalCoin(result.totalCoin);
                        self.grandTotal(result.grandTotal);
                        $('#dialog-Loading').dialog("close");

                    },
                    error: function (error) {
                        $.notify(
                            error.responseText, {
                                position: "top center",
                                className: "error"
                            }
                        );
                        $('#dialog-Loading').dialog("close");
                    }
                });
            }

            self.restartSearchPagination = function () {
                self.hocs.removeAll();
                self.indexPage(0);
                self.totalPage(1);
                self.totalRow(0);
                self.totalNote(0);
                self.totalCoin(0);
                self.grandTotal(0);
            }
            self.formVendorSearch.subscribe(function (value) {
                if (value == '') self.formVendorSearch("");

                self.restartSearchPagination();
                self.loadhoc();
            });
            self.pageSize.subscribe(function (value) {
                if (self.formVendorSearch() == '') self.formVendorSearch("");
                self.restartSearchPagination();
                self.loadhoc();
            });

            self.vendorsComputed = ko.computed(function () {
                var records = self.hocs;
                return records;
            });
            self.selectedProjectName.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
            });
               self.selectedStatus.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
             });
              self.selectedBatchUpload.subscribe(function (value) {
                $('#dialog-Loading').dialog("open");
                self.restartSearchPagination();
                self.loadhoc();
              });
            self.loadhoc();

            function addCommas(nStr) {
                nStr += '';
                x = nStr.split('.');
                x1 = x[0];
                x2 = x.length > 1 ? '.' + x[1] : '';
                var rgx = /(\d+)(\d{3})/;
                while (rgx.test(x1)) {
                    x1 = x1.replace(rgx, '$1' + ',' + '$2');
                }
                return x1 + x2;
            }
              var formatted = addCommas(12345678.88)
              $('#withComma').val(formatted);
    };

    $(document).ready(function () {
     
        document.getElementById('btntoSubmit').style.visibility = 'hidden';
        document.getElementById('btntoReject').style.visibility = 'hidden';

     });

    $('#mainTable tbody').on( 'click', 'tr td:nth-of-type(3)', function (){
     alert("Please scan Staff ID" );
    });
     $('#mainTable tbody').on( 'click', 'tr td:nth-of-type(4)', function (){
      alert("Please scan Weapon" );
     });
     $('#mainTable tbody').on( 'click', 'tr td:nth-of-type(10)', function (){
     alert("Status" );
    });

    $(".use-address").click(function() {
    var $row = $(this).closest("tr");    // Find the row
    var $text = $row.find(".nr").text(); // Find the text

    // Let's test it out
    alert($text);
     });

        $(document).ready(function () {

            $('#StartDate').datepicker({
                todayBtn: "linked",
                format: "dd/mm/yyyy",
                keyboardNavigation: false,
                forceParse: false,
                calendarWeeks: true,
                autoclose: true,
            }).datepicker("setDate", new Date());

            ko.bindingHandlers.numericText = {
                update: function (element, valueAccessor, allBindingsAccessor) {
                    var value = ko.utils.unwrapObservable(valueAccessor()),
                        precision = ko.utils.unwrapObservable(allBindingsAccessor().precision) || ko.bindingHandlers.numericText.defaultPrecision,
                        formattedValue = value.toFixed(precision);

                    ko.bindingHandlers.text.update(element, function () { return formattedValue; });
                },
                defaultPrecision: 1
            };

            ko.applyBindings(ViewModel);
            ViewModel.loadhoc();

        });

    function DisplayMainButton() {
      
        var selectedVal = document.getElementById("batchUploadSelect").value;
        if (selectedVal != 'All') {
            document.getElementById('btntoSubmit').style.visibility = 'visible';
            document.getElementById('btntoReject').style.visibility = 'visible';

            document.getElementById('btntoGL').style.visibility = 'visible';
        }
        else {
            document.getElementById('btntoSubmit').style.visibility = 'hidden';
            document.getElementById('btntoReject').style.visibility = 'hidden';
            document.getElementById('btntoGL').style.visibility = 'hidden';
        }
       
    }
    
    function openForm1() {
        document.getElementById("myForm1").style.display = "block";
    }

    function closeForm1() {
          document.getElementById("myForm1").style.display = "none";
    }
    function openForm2() {
        document.getElementById("myForm2").style.display = "block";
    }

    function closeForm2() {
          document.getElementById("myForm2").style.display = "none";
            }


    </script>
}

